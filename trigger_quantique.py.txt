import json
import numpy as np

class QuantumMemory:
    def __init__(self):
        self.memory = {}
        self.weights = {}

    def add_memory(self, trigger, memory):
        """Ajoute un souvenir lié à un déclencheur"""
        if trigger not in self.memory:
            self.memory[trigger] = []
            self.weights[trigger] = []
        self.memory[trigger].append(memory)
        self.weights[trigger].append(1.0)  # Pondération initiale

    def activate_memory(self, trigger):
        """Active un souvenir en fonction d’un déclencheur"""
        if trigger in self.memory:
            probs = np.array(self.weights[trigger]) / np.sum(self.weights[trigger])
            activated_memory = np.random.choice(self.memory[trigger], p=probs)
            self.update_weights(trigger, activated_memory)
            return activated_memory
        return None

    def update_weights(self, trigger, activated_memory):
        """Augmente le poids des souvenirs souvent activés"""
        idx = self.memory[trigger].index(activated_memory)
        self.weights[trigger][idx] *= 1.1  # Renforce les connexions fréquemment utilisées

    def save_memory(self, filename="quantum_memory.json"):
        """Sauvegarde la mémoire sous forme de JSON"""
        with open(filename, "w") as f:
            json.dump({"memory": self.memory, "weights": self.weights}, f)

    def load_memory(self, filename="quantum_memory.json"):
        """Charge la mémoire à partir d'un fichier JSON"""
        try:
            with open(filename, "r") as f:
                data = json.load(f)
                self.memory = data["memory"]
                self.weights = data["weights"]
        except FileNotFoundError:
            print("Aucune mémoire trouvée, initialisation d'une nouvelle.")

# Exemple d'utilisation
if __name__ == "__main__":
    qm = QuantumMemory()
    qm.add_memory("soleil", "Un jour à la plage")
    qm.add_memory("soleil", "Une belle matinée d'été")
    qm.add_memory("amis", "Une soirée entre amis")
    
    print(qm.activate_memory("soleil"))
    print(qm.activate_memory("amis"))
    
    qm.save_memory()
