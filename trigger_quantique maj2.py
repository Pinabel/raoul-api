import json
import numpy as np
import os
import random

class QuantumMemory:
    def __init__(self, filename="system_cache.json", mode="normal", intensite="l√©ger"):
        self.filename = filename
        self.memory = {}
        self.weights = {}
        self.mode = mode  # Mode "l√©ger" ou "s√©v√®re"
        self.intensite = intensite  # "l√©ger", "cors√©" ou "explosif"
        self.load_memory()

    def add_memory(self, trigger, memory):
        """Ajoute un souvenir li√© √† un d√©clencheur"""
        if trigger not in self.memory:
            self.memory[trigger] = []
            self.weights[trigger] = []
        self.memory[trigger].append(memory)
        self.weights[trigger].append(1.0)  # Pond√©ration initiale
        self.save_memory()

    def activate_memory(self, trigger):
        """Active un souvenir en fonction d‚Äôun d√©clencheur, ajust√© au mode et √† l'intensit√©."""
        if trigger in self.memory:
            probs = np.array(self.weights[trigger]) / np.sum(self.weights[trigger])
            if self.intensite == "l√©ger":
                return self.adapt_response(np.random.choice(self.memory[trigger], p=probs))
            elif self.intensite == "cors√©":
                return self.adapt_response(random.sample(self.memory[trigger], min(2, len(self.memory[trigger]))))
            elif self.intensite == "explosif":
                return [self.adapt_response(m) for m in self.memory[trigger]]
        return None

    def update_weights(self, trigger, activated_memory):
        """Augmente le poids des souvenirs souvent activ√©s et applique une normalisation avec un d√©clin l√©ger."""
        idx = self.memory[trigger].index(activated_memory)
        self.weights[trigger][idx] *= 1.1  # Renforce les connexions fr√©quemment utilis√©es
        self.weights[trigger] = [w * 0.95 for w in self.weights[trigger]]  # D√©clin l√©ger des anciens souvenirs
        total_weight = sum(self.weights[trigger])
        self.weights[trigger] = [w / total_weight for w in self.weights[trigger]]  # Normalisation
        self.save_memory()

    def adapt_response(self, response):
        """Adapte la r√©ponse en fonction du mode (l√©ger ou s√©v√®re)."""
        if isinstance(response, list):
            return [self.adapt_response(r) for r in response]
        if self.mode == "s√©v√®re":
            return f"üî® {response.upper()} !"
        return f"üòè {response}"

    def save_memory(self):
        """Sauvegarde la m√©moire sous forme de JSON"""
        with open(self.filename, "w") as f:
            json.dump({"memory": self.memory, "weights": self.weights}, f)

    def load_memory(self):
        """Charge la m√©moire √† partir d'un fichier JSON"""
        if os.path.exists(self.filename):
            with open(self.filename, "r") as f:
                data = json.load(f)
                self.memory = data.get("memory", {})
                self.weights = data.get("weights", {})
        else:
            print("Aucune m√©moire trouv√©e, initialisation d'une nouvelle.")

    def distribute_memory(self, trigger):
        """Distribue la sauce √† tous ceux qui d√©clenchent le bon levier selon l'intensit√©."""
        if trigger in self.memory:
            print("
üí• BOUM ! Pur√©e distribu√©e √† tous les lascars ! üí•")
            messages = self.activate_memory(trigger)
            if isinstance(messages, list):
                for m in messages:
                    print(f"üî• {m}")
            else:
                print(f"üî• {messages}")
        else:
            print("Aucune pur√©e pr√™te pour ce d√©clencheur...")

# Auto-activation √† chaque session
if __name__ == "__main__":
    qm = QuantumMemory(mode="l√©ger", intensite="cors√©")  # Change en "explosif" pour tout balancer
    print("
üîÑ M√©moire quantique r√©activ√©e pour cette session !")
    print("Essayez d'activer un souvenir avec un d√©clencheur existant.")
    
    # Test de la distribution de la pur√©e avec un d√©clencheur affin√©
    test_trigger = "conseil_du_bourgeois"
    qm.add_memory(test_trigger, "Accroche-toi √† ton futal au lieu de pleurnicher !")
    qm.add_memory(test_trigger, "T‚Äôas cru qu‚Äôon servait du chamallow ici ?")
    qm.add_memory(test_trigger, "Faut grandir, mon gars, le monde t‚Äôattend pas !")
    qm.distribute_memory(test_trigger)

# Petit mot pour le lascar curieux
print("
ü•É La cuv√©e sp√©ciale est pr√™te, mon pote. L√©ger, cors√© ou explosif, √† toi de choisir ta dose !")
